STEPS TO FOLLOW TO CONFIGURE GRUNT!!

* install grunt global
	npm install -g grunt-cli

*create a file called package.json

	{
	  "name": "conFusion",
	  "private": true,
	  "devDependencies": {},
	  
	  "engines": {
	    "node": ">=0.10.0"
	  }
	}

* install grunt local
	npm install grunt --save-dev	

*create Grunt.js

	'use strict';

	module.exports = function (grunt) {
	  // Define the configuration for all the tasks
	  grunt.initConfig({

	  });
	};

* Enclose css files into comments to build min css

	<!-- build:css styles/main.css -->
	  <link href="../bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
	  <link href="../bower_components/bootstrap/dist/css/bootstrap-theme.min.css" rel="stylesheet">
	  <link href="../bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet">
	  <link href="styles/bootstrap-social.css" rel="stylesheet">
	  <link href="styles/mystyles.css" rel="stylesheet">
	<!-- endbuild -->

* Enclose js files into comments to build min js

	<!-- build:js scripts/main.js -->
	  <script src="../bower_components/angular/angular.min.js"></script>
	  <script src="scripts/app.js"></script>
	<!-- endbuild -->

* Install Jshint: "validates our JavaScript code and points out errors and gives warnings about minor violations"

	npm install grunt-contrib-jshint --save-dev
	npm install jshint-stylish --save-dev
	npm install time-grunt --save-dev
	npm install jit-grunt --save-dev

* Add this lines in the function of Grunt.js

// Time how long tasks take. Can help when optimizing build times
	require('time-grunt')(grunt);

	// Automatically load required Grunt tasks
	require('jit-grunt')(grunt);

	// Define the configuration for all the tasks
	grunt.initConfig({
	  pkg: grunt.file.readJSON('package.json'),

	  // Make sure code styles are up to par and there are no obvious mistakes
	  jshint: {
	    options: {
	      jshintrc: '.jshintrc',
	      reporter: require('jshint-stylish')
	    },
	    
	    all: {
	      src: [
	        'Gruntfile.js',
	        'app/scripts/{,*/}*.js'
	      ]
	    }
	  }
	});

	grunt.registerTask('build', [
	  'jshint'
	]);

	grunt.registerTask('default',['build']);

*   create a file named .jshintrc (Don't forget the . in front of jshintrc) in the conFusion folder, and include the following in the file:

{
  "bitwise": true,
  "browser": true,
  "curly": true,
  "eqeqeq": true,
  "esnext": true,
  "latedef": true,
  "noarg": true,
  "node": true,
  "strict": true,
  "undef": true,
  "unused": true,
  "globals": {
    "angular": false
  }
}

Copying the Files and Cleaning Up the Dist Folder

* Next you will install the Grunt modules to copy over files to a distribution folder named dist, and clean up the dist folder when needed. To do this, install the following Grunt modules:

npm install grunt-contrib-copy --save-dev
npm install grunt-contrib-clean --save-dev

* You will now add the code to perform the copying of files to the dist folder, and cleaning up the dist folder. To do this, add the following code to Gruntfile.js. This should be added right after the configuration of the JSHint task.:

	},

	copy: {
	  dist: {
	    cwd: 'app',
	    src: [ '**','!styles/**/*.css','!scripts/**/*.js' ],
	    dest: 'dist',
	    expand: true
	  },
	  
	  fonts: {
	    files: [
	      {
	        //for bootstrap fonts
	        expand: true,
	        dot: true,
	        cwd: 'bower_components/bootstrap/dist',
	        src: ['fonts/*.*'],
	        dest: 'dist'
	      }, {
	        //for font-awesome
	        expand: true,
	        dot: true,
	        cwd: 'bower_components/font-awesome',
	        src: ['fonts/*.*'],
	        dest: 'dist'
	      }
	    ]
	  }
	},

	clean: {
	  build: {
	    src: [ 'dist/']
	  }
	}

Preparing the Distribution Folder and Files

* We are now going to use the Grunt usemin module together with concat, cssmin, uglify and filerev to prepare the distribution folder. To do this, install the following Grunt modules:

	 npm install grunt-contrib-concat --save-dev
	 npm install grunt-contrib-cssmin --save-dev
	 npm install grunt-contrib-uglify --save-dev
	 npm install grunt-filerev --save-dev
	 npm install grunt-usemin --save-dev

* Next, update the task configuration within the Gruntfile.js with the following additional code to introduce the new tasks:

	    },
	    useminPrepare: {
	        html: 'app/menu.htm},

	useminPrepare: {
	  html: 'app/menu.html',
	  options: {
	    dest: 'dist'
	  }
	},

	// Concat
	concat: {
	  options: {
	    separator: ';'
	  },
	  
	  // dist configuration is provided by useminPrepare
	  dist: {}
	},

	// Uglify
	uglify: {
	  // dist configuration is provided by useminPrepare
	  dist: {}
	},

	cssmin: {
	  dist: {}
	},

	// Filerev
	filerev: {
	  options: {
	    encoding: 'utf8',
	    algorithm: 'md5',
	    length: 20
	  },
	  
	  release: {
	    // filerev:release hashes(md5) all assets (images, js and css )
	    // in dist directory
	    files: [{
	      src: [
	        'dist/scripts/*.js',
	        'dist/styles/*.css',
	      ]
	    }]
	  }
	},
	  
	// Usemin
	// Replaces all assets with their revved version in html and css files.
	// options.assetDirs contains the directories for finding the assets
	// according to their relative paths
	usemin: {
	  html: ['dist/*.html'],
	  css: ['dist/styles/*.css'],
	  options: {
	    assetsDirs: ['dist', 'dist/styles']
	  }
	},

* Next, update the jit-grunt configuration as follows, to inform it that useminPrepare task depends on the usemin package:

	require('jit-grunt')(grunt, {
	  useminPrepare: 'grunt-usemin'
	});


* Next, update the Grunt build task as follows:

	grunt.registerTask('build', [
	  'clean',
	  'jshint',
	  'useminPrepare',
	  'concat',
	  'cssmin',
	  'uglify',
	  'copy',
	  'filerev',
	  'usemin'
	]);

Watch, Connect and Serve Tasks

* The final step is to use the Grunt modules watch, connect and watch, to spin up a web server and keep a watch on the files and automatically reload the browser when any of the watched files are updated. To do this, install the following grunt modules:

	npm install grunt-contrib-watch --save-dev
	npm install grunt-contrib-connect --save-dev

* After this, we will configure the connect and watch tasks by adding the following code to the Grunt file:

	watch: {
	  copy: {
	    files: [ 'app/**', '!app/**/*.css', '!app/**/*.js'],
	    tasks: [ 'build' ]
	  },
	  
	  scripts: {
	    files: ['app/scripts/app.js'],
	    tasks:[ 'build']
	  },
	  
	  styles: {
	    files: ['app/styles/mystyles.css'],
	    tasks:['build']
	  },
	  
	  livereload: {
	    options: {
	      livereload: '<%= connect.options.livereload %>'
	    },
	    
	    files: [
	      'app/{,*/}*.html',
	      '.tmp/styles/{,*/}*.css',
	      'app/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'
	    ]
	  }
	},

	connect: {
	  options: {
	    port: 9000,
	    // Change this to '0.0.0.0' to access the server from outside.
	    hostname: 'localhost',
	    livereload: 35729
	  },
	  
	  dist: {
	    options: {
	      open: true,
	      base:{
	        path: 'dist',
	        options: {
	          index: 'menu.html',
	          maxAge: 300000
	        }
	      }
	    }
	  }
	},

* Then add the following task to the Grunt file:

	grunt.registerTask('serve',['build','connect:dist','watch']);

* Now if you type the following at the command prompt, it will build the project, and open the web page in your default browser. It will also keep a watch on the files in the app folder, and if you update any of them, it will rebuild the project and load the updated page into the browser (livereload)
	
	grunt serve